<?xml version='1.0' encoding='utf-8'?>
<klayout-macro><description /><version /><category>drc</category><prolog /><epilog /><doc /><autorun>false</autorun><autorun-early>false</autorun-early><shortcut /><show-in-menu>true</show-in-menu><group-name>drc_scripts</group-name><menu-path>tools_menu.drc.end</menu-path><interpreter>dsl</interpreter><dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name><text># Autogenerated file. Changes will be overwritten.

report("C4M.Sky130 DRC")

def width_check(layer, w)
    small = layer.width(w).polygons
    big = layer.sized(-0.5*w).size(0.5*w)

    small | big
end

def space4width_check(layer, w, s)
    big = layer.sized(-0.5*w).size(0.5*w)
    big.edges.separation(layer.edges, s)
end

def oppenc_check(inner, outer, min, max)
    toosmall = outer.enclosing(inner, min).second_edges

    smallenc = outer.enclosing(inner, max - 1.dbu, projection).second_edges
    # These edges may not touch each other
    touching = smallenc.width(1.dbu, angle_limit(100)).edges

    inner.interacting(toosmall + touching)
end

def extend_check(base, extend, e)
    extend.enclosing(base, e).first_edges.not_interacting(base)
end

def dens_check(output, input, min, max)
    tp = RBA::TilingProcessor::new

    tp.output("res", output.data)
    tp.input("input", input.data)
    tp.dbu = 1.dbu  # establish the real database unit
    tp.var("vmin", min)
    tp.var("vmax", max)

    tp.queue("_tile &amp;&amp; (var d = to_f(input.area(_tile.bbox)) / to_f(_tile.bbox.area); (d &lt; vmin || d &gt; vmax) &amp;&amp; _output(res, _tile.bbox))")
    tp.execute("Density check")
end

# Define layers
nwm = input(64, 20)
nsdm = input(93, 44)
psdm = input(94, 20)
hvi = input(75, 20)
difftap_pin = input(65, 16)
difftap_block = input(100, 10)
difftap = input(65, 20)
poly_pin = input(66, 16)
poly_block = input(100, 20)
poly = input(66, 20)
li_pin = input(67, 16)
li_block = input(100, 40)
li = input(67, 20)
m1_pin = input(68, 16)
m1_block = input(100, 60)
m1 = input(68, 20)
m2_pin = input(69, 16)
m2_block = input(100, 80)
m2 = input(69, 20)
m3_pin = input(70, 16)
m3_block = input(100, 100)
m3 = input(70, 20)
m4_pin = input(71, 16)
m4_block = input(100, 120)
m4 = input(71, 20)
m5_pin = input(72, 16)
m5_block = input(100, 140)
m5 = input(72, 20)
licon_block = input(100, 30)
mcon_block = input(100, 50)
via_block = input(100, 70)
via2_block = input(100, 90)
via3_block = input(100, 110)
via4_block = input(100, 130)
licon = input(66, 44)
mcon = input(67, 44)
via = input(68, 44)
via2 = input(69, 44)
via3 = input(70, 44)
via4 = input(71, 44)
hvtp = input(78, 44)
lvtn = input(125, 44)
pad = input(76, 20)
diffres = input(65, 13)
polyres = input(66, 13)
areaid_diode = input(81, 23)
prBoundary = input(235, 4)

# Grid check
nwm.ongrid(0.005).output(
    "nwm grid", "nwm grid: 0.005µm"
)
nsdm.ongrid(0.005).output(
    "nsdm grid", "nsdm grid: 0.005µm"
)
psdm.ongrid(0.005).output(
    "psdm grid", "psdm grid: 0.005µm"
)
hvi.ongrid(0.005).output(
    "hvi grid", "hvi grid: 0.005µm"
)
difftap_pin.ongrid(0.005).output(
    "difftap_pin grid", "difftap_pin grid: 0.005µm"
)
difftap_block.ongrid(0.005).output(
    "difftap_block grid", "difftap_block grid: 0.005µm"
)
difftap.ongrid(0.005).output(
    "difftap grid", "difftap grid: 0.005µm"
)
poly_pin.ongrid(0.005).output(
    "poly_pin grid", "poly_pin grid: 0.005µm"
)
poly_block.ongrid(0.005).output(
    "poly_block grid", "poly_block grid: 0.005µm"
)
poly.ongrid(0.005).output(
    "poly grid", "poly grid: 0.005µm"
)
li_pin.ongrid(0.005).output(
    "li_pin grid", "li_pin grid: 0.005µm"
)
li_block.ongrid(0.005).output(
    "li_block grid", "li_block grid: 0.005µm"
)
li.ongrid(0.005).output(
    "li grid", "li grid: 0.005µm"
)
m1_pin.ongrid(0.005).output(
    "m1_pin grid", "m1_pin grid: 0.005µm"
)
m1_block.ongrid(0.005).output(
    "m1_block grid", "m1_block grid: 0.005µm"
)
m1.ongrid(0.005).output(
    "m1 grid", "m1 grid: 0.005µm"
)
m2_pin.ongrid(0.005).output(
    "m2_pin grid", "m2_pin grid: 0.005µm"
)
m2_block.ongrid(0.005).output(
    "m2_block grid", "m2_block grid: 0.005µm"
)
m2.ongrid(0.005).output(
    "m2 grid", "m2 grid: 0.005µm"
)
m3_pin.ongrid(0.005).output(
    "m3_pin grid", "m3_pin grid: 0.005µm"
)
m3_block.ongrid(0.005).output(
    "m3_block grid", "m3_block grid: 0.005µm"
)
m3.ongrid(0.005).output(
    "m3 grid", "m3 grid: 0.005µm"
)
m4_pin.ongrid(0.005).output(
    "m4_pin grid", "m4_pin grid: 0.005µm"
)
m4_block.ongrid(0.005).output(
    "m4_block grid", "m4_block grid: 0.005µm"
)
m4.ongrid(0.005).output(
    "m4 grid", "m4 grid: 0.005µm"
)
m5_pin.ongrid(0.005).output(
    "m5_pin grid", "m5_pin grid: 0.005µm"
)
m5_block.ongrid(0.005).output(
    "m5_block grid", "m5_block grid: 0.005µm"
)
m5.ongrid(0.005).output(
    "m5 grid", "m5 grid: 0.005µm"
)
licon_block.ongrid(0.005).output(
    "licon_block grid", "licon_block grid: 0.005µm"
)
mcon_block.ongrid(0.005).output(
    "mcon_block grid", "mcon_block grid: 0.005µm"
)
via_block.ongrid(0.005).output(
    "via_block grid", "via_block grid: 0.005µm"
)
via2_block.ongrid(0.005).output(
    "via2_block grid", "via2_block grid: 0.005µm"
)
via3_block.ongrid(0.005).output(
    "via3_block grid", "via3_block grid: 0.005µm"
)
via4_block.ongrid(0.005).output(
    "via4_block grid", "via4_block grid: 0.005µm"
)
licon.ongrid(0.005).output(
    "licon grid", "licon grid: 0.005µm"
)
mcon.ongrid(0.005).output(
    "mcon grid", "mcon grid: 0.005µm"
)
via.ongrid(0.005).output(
    "via grid", "via grid: 0.005µm"
)
via2.ongrid(0.005).output(
    "via2 grid", "via2 grid: 0.005µm"
)
via3.ongrid(0.005).output(
    "via3 grid", "via3 grid: 0.005µm"
)
via4.ongrid(0.005).output(
    "via4 grid", "via4 grid: 0.005µm"
)
hvtp.ongrid(0.005).output(
    "hvtp grid", "hvtp grid: 0.005µm"
)
lvtn.ongrid(0.005).output(
    "lvtn grid", "lvtn grid: 0.005µm"
)
pad.ongrid(0.005).output(
    "pad grid", "pad grid: 0.005µm"
)
diffres.ongrid(0.005).output(
    "diffres grid", "diffres grid: 0.005µm"
)
polyres.ongrid(0.005).output(
    "polyres grid", "polyres grid: 0.005µm"
)
areaid_diode.ongrid(0.005).output(
    "areaid_diode grid", "areaid_diode grid: 0.005µm"
)
prBoundary.ongrid(0.005).output(
    "prBoundary grid", "prBoundary grid: 0.005µm"
)

# Derived layers
# wafer.remove(nwm).alias(substrate:Sky130)
substrate__Sky130 = (extent.sized(0.340000)-nwm)
# difftap.remove(join(diffres,poly)).alias(difftap__conn)
difftap__conn = (difftap-(diffres+poly))
# intersect(difftap__conn,nsdm).alias(difftap__conn:nsdm)
difftap__conn__nsdm = (difftap__conn&amp;nsdm)
# intersect(difftap__conn,psdm).alias(difftap__conn:psdm)
difftap__conn__psdm = (difftap__conn&amp;psdm)
# poly.remove(polyres).alias(poly__conn)
poly__conn = (poly-polyres)
# intersect(difftap,poly__conn,hvi).alias(gate:hvmosgate)
gate__hvmosgate = (difftap&amp;poly__conn&amp;hvi)
# intersect(difftap,poly__conn,wafer.remove(hvi)).alias(gate:mosgate)
gate__mosgate = (difftap&amp;poly__conn&amp;(extent.sized(0.340000)-hvi))
# intersect(gate:mosgate,substrate:Sky130,nsdm).alias(gate:mosfet:nfet_01v8)
gate__mosfet__nfet_01v8 = (gate__mosgate&amp;substrate__Sky130&amp;nsdm)
# intersect(gate:mosgate,substrate:Sky130,nsdm,lvtn).alias(gate:mosfet:nfet_01v8_lvt)
gate__mosfet__nfet_01v8_lvt = (gate__mosgate&amp;substrate__Sky130&amp;nsdm&amp;lvtn)
# intersect(gate:hvmosgate,substrate:Sky130,nsdm).alias(gate:mosfet:nfet_g5v0d10v5)
gate__mosfet__nfet_g5v0d10v5 = (gate__hvmosgate&amp;substrate__Sky130&amp;nsdm)
# intersect(gate:mosgate,nwm,psdm).alias(gate:mosfet:pfet_01v8)
gate__mosfet__pfet_01v8 = (gate__mosgate&amp;nwm&amp;psdm)
# intersect(gate:mosgate,nwm,psdm,hvtp).alias(gate:mosfet:pfet_01v8_hvt)
gate__mosfet__pfet_01v8_hvt = (gate__mosgate&amp;nwm&amp;psdm&amp;hvtp)
# intersect(gate:mosgate,nwm,psdm,lvtn).alias(gate:mosfet:pfet_01v8_lvt)
gate__mosfet__pfet_01v8_lvt = (gate__mosgate&amp;nwm&amp;psdm&amp;lvtn)
# intersect(gate:hvmosgate,nwm,psdm).alias(gate:mosfet:pfet_g5v0d10v5)
gate__mosfet__pfet_g5v0d10v5 = (gate__hvmosgate&amp;nwm&amp;psdm)
# intersect(difftap,diffres).alias(resistor:active_res)
resistor__active_res = (difftap&amp;diffres)
# intersect(poly,polyres).alias(resistor:poly_res)
resistor__poly_res = (poly&amp;polyres)
# intersect(difftap,areaid_diode,psdm).alias(diode:pdiode)
diode__pdiode = (difftap&amp;areaid_diode&amp;psdm)
# intersect(difftap,areaid_diode,nsdm).alias(diode:ndiode)
diode__ndiode = (difftap&amp;areaid_diode&amp;nsdm)

# Connectivity
# connect(substrate:Sky130,wafer)
connect(substrate__Sky130, extent.sized(0.340000))
# connect(difftap,difftap.pin)
connect(difftap, difftap_pin)
# connect(difftap__conn,difftap__conn:nsdm)
connect(difftap__conn, difftap__conn__nsdm)
# connect(difftap__conn:nsdm,nwm)
connect(difftap__conn__nsdm, nwm)
# connect(difftap__conn,difftap__conn:psdm)
connect(difftap__conn, difftap__conn__psdm)
# connect(difftap__conn:psdm,substrate:Sky130)
connect(difftap__conn__psdm, substrate__Sky130)
# connect(poly,poly.pin)
connect(poly, poly_pin)
# connect(li,li.pin)
connect(li, li_pin)
# connect(m1,m1.pin)
connect(m1, m1_pin)
# connect(m2,m2.pin)
connect(m2, m2_pin)
# connect(m3,m3.pin)
connect(m3, m3_pin)
# connect(m4,m4.pin)
connect(m4, m4_pin)
# connect(m5,m5.pin)
connect(m5, m5_pin)
# connect((difftap__conn,poly__conn),licon)
connect(difftap__conn, licon)
connect(poly__conn, licon)
# connect(licon,li)
connect(licon, li)
# connect(li,mcon)
connect(li, mcon)
# connect(mcon,m1)
connect(mcon, m1)
# connect(m1,via)
connect(m1, via)
# connect(via,m2)
connect(via, m2)
# connect(m2,via2)
connect(m2, via2)
# connect(via2,m3)
connect(via2, m3)
# connect(m3,via3)
connect(m3, via3)
# connect(via3,m4)
connect(via3, m4)
# connect(m4,via4)
connect(m4, via4)
# connect(via4,m5)
connect(via4, m5)

# DRC rules
# nwm.width &gt;= 0.84
nwm.width(0.84).output(
    "nwm width", "nwm minimum width: 0.84µm"
)
# nwm.space &gt;= 1.27
nwm.space(1.27).output(
    "nwm space", "nwm minimum space: 1.27µm"
)
# nsdm.width &gt;= 0.38
nsdm.width(0.38).output(
    "nsdm width", "nsdm minimum width: 0.38µm"
)
# nsdm.space &gt;= 0.38
nsdm.space(0.38).output(
    "nsdm space", "nsdm minimum space: 0.38µm"
)
# nsdm.area &gt;= 0.265
nsdm.with_area(nil, 0.265).output(
    "nsdm area", "nsdm minimum area: 0.265µm"
)
# psdm.width &gt;= 0.38
psdm.width(0.38).output(
    "psdm width", "psdm minimum width: 0.38µm"
)
# psdm.space &gt;= 0.38
psdm.space(0.38).output(
    "psdm space", "psdm minimum space: 0.38µm"
)
# psdm.area &gt;= 0.265
psdm.with_area(nil, 0.265).output(
    "psdm area", "psdm minimum area: 0.265µm"
)
# hvi.width &gt;= 0.6
hvi.width(0.6).output(
    "hvi width", "hvi minimum width: 0.6µm"
)
# hvi.space &gt;= 0.7
hvi.space(0.7).output(
    "hvi space", "hvi minimum space: 0.7µm"
)
# difftap.width &gt;= 0.15
difftap.width(0.15).output(
    "difftap width", "difftap minimum width: 0.15µm"
)
# difftap.space &gt;= 0.27
difftap.space(0.27).output(
    "difftap space", "difftap minimum space: 0.27µm"
)
# difftap.enclosed_by(nsdm) &gt;= Enclosure(0.125)
nsdm.enclosing(difftap, 0.125).output(
    "nsdm:difftap enclosure",
    "Minimum enclosure of nsdm around difftap: 0.125µm"
)
# difftap.enclosed_by(psdm) &gt;= Enclosure(0.125)
psdm.enclosing(difftap, 0.125).output(
    "psdm:difftap enclosure",
    "Minimum enclosure of psdm around difftap: 0.125µm"
)
# intersect(nsdm,psdm).area == 0.0
(nsdm&amp;psdm).output("(nsdm&amp;psdm) empty")
# difftap.enclosed_by(nwm) &gt;= Enclosure(0.18)
nwm.enclosing(difftap, 0.18).output(
    "nwm:difftap enclosure",
    "Minimum enclosure of nwm around difftap: 0.18µm"
)
# difftap.enclosed_by(substrate:Sky130) &gt;= Enclosure(0.34)
substrate__Sky130.enclosing(difftap, 0.34).output(
    "substrate__Sky130:difftap enclosure",
    "Minimum enclosure of substrate__Sky130 around difftap: 0.34µm"
)
# difftap.enclosed_by(hvi) &gt;= Enclosure(0.18)
hvi.enclosing(difftap, 0.18).output(
    "hvi:difftap enclosure",
    "Minimum enclosure of hvi around difftap: 0.18µm"
)
# edge(difftap).interact_with(edge(nwm)).length == 0.0
difftap.edges.interacting(nwm.edges).output("difftap.edges.interacting(nwm.edges) empty")
# poly.width &gt;= 0.15
poly.width(0.15).output(
    "poly width", "poly minimum width: 0.15µm"
)
# poly.space &gt;= 0.21
poly.space(0.21).output(
    "poly space", "poly minimum space: 0.21µm"
)
# li.width &gt;= 0.17
li.width(0.17).output(
    "li width", "li minimum width: 0.17µm"
)
# li.space &gt;= 0.17
li.space(0.17).output(
    "li space", "li minimum space: 0.17µm"
)
# m1.width &gt;= 0.14
m1.width(0.14).output(
    "m1 width", "m1 minimum width: 0.14µm"
)
# m1.space &gt;= 0.14
m1.space(0.14).output(
    "m1 space", "m1 minimum space: 0.14µm"
)
# m1.area &gt;= 0.083
m1.with_area(nil, 0.083).output(
    "m1 area", "m1 minimum area: 0.083µm"
)
# space(m1.parts_with(m1.width &gt;= 1.5),m1) &gt;= 0.28
space4width_check(m1, 1.5, 0.28).output(
    "m1 table spacing",
    "Minimum m1 spacing for 1.5µm width: 0.28µm"
)
# m2.width &gt;= 0.14
m2.width(0.14).output(
    "m2 width", "m2 minimum width: 0.14µm"
)
# m2.space &gt;= 0.14
m2.space(0.14).output(
    "m2 space", "m2 minimum space: 0.14µm"
)
# m2.area &gt;= 0.0676
m2.with_area(nil, 0.0676).output(
    "m2 area", "m2 minimum area: 0.0676µm"
)
# space(m2.parts_with(m2.width &gt;= 1.5),m2) &gt;= 0.28
space4width_check(m2, 1.5, 0.28).output(
    "m2 table spacing",
    "Minimum m2 spacing for 1.5µm width: 0.28µm"
)
# m3.width &gt;= 0.3
m3.width(0.3).output(
    "m3 width", "m3 minimum width: 0.3µm"
)
# m3.space &gt;= 0.3
m3.space(0.3).output(
    "m3 space", "m3 minimum space: 0.3µm"
)
# m3.area &gt;= 0.24
m3.with_area(nil, 0.24).output(
    "m3 area", "m3 minimum area: 0.24µm"
)
# space(m3.parts_with(m3.width &gt;= 1.5),m3) &gt;= 0.4
space4width_check(m3, 1.5, 0.4).output(
    "m3 table spacing",
    "Minimum m3 spacing for 1.5µm width: 0.4µm"
)
# m4.width &gt;= 0.3
m4.width(0.3).output(
    "m4 width", "m4 minimum width: 0.3µm"
)
# m4.space &gt;= 0.3
m4.space(0.3).output(
    "m4 space", "m4 minimum space: 0.3µm"
)
# m4.area &gt;= 0.24
m4.with_area(nil, 0.24).output(
    "m4 area", "m4 minimum area: 0.24µm"
)
# space(m4.parts_with(m4.width &gt;= 1.5),m4) &gt;= 0.4
space4width_check(m4, 1.5, 0.4).output(
    "m4 table spacing",
    "Minimum m4 spacing for 1.5µm width: 0.4µm"
)
# m5.width &gt;= 1.6
m5.width(1.6).output(
    "m5 width", "m5 minimum width: 1.6µm"
)
# m5.space &gt;= 1.6
m5.space(1.6).output(
    "m5 space", "m5 minimum space: 1.6µm"
)
# m5.area &gt;= 4.0
m5.with_area(nil, 4.0).output(
    "m5 area", "m5 minimum area: 4.0µm"
)
# licon.width == 0.17
width_check(licon, 0.17).output(
    "licon width", "licon width: 0.17µm"
)
# licon.space &gt;= 0.17
licon.space(0.17).output(
    "licon space", "licon minimum space: 0.17µm"
)
# licon.enclosed_by(difftap) &gt;= Enclosure((0.04,0.12))
oppenc_check(licon, difftap, 0.04, 0.12).output(
    "difftap:licon asymmetric enclosure",
    "Minimum enclosure of difftap around licon: 0.04µm minimum, 0.12µm opposite"
)
# licon.enclosed_by(poly) &gt;= Enclosure((0.05,0.08))
oppenc_check(licon, poly, 0.05, 0.08).output(
    "poly:licon asymmetric enclosure",
    "Minimum enclosure of poly around licon: 0.05µm minimum, 0.08µm opposite"
)
# licon.enclosed_by(li) &gt;= Enclosure((0.0,0.08))
oppenc_check(licon, li, 0.0, 0.08).output(
    "li:licon asymmetric enclosure",
    "Minimum enclosure of li around licon: 0.0µm minimum, 0.08µm opposite"
)
# mcon.width == 0.17
width_check(mcon, 0.17).output(
    "mcon width", "mcon width: 0.17µm"
)
# mcon.space &gt;= 0.19
mcon.space(0.19).output(
    "mcon space", "mcon minimum space: 0.19µm"
)
# mcon.enclosed_by(li) &gt;= Enclosure(0.0)
li.enclosing(mcon, 0.0).output(
    "li:mcon enclosure",
    "Minimum enclosure of li around mcon: 0.0µm"
)
# mcon.enclosed_by(m1) &gt;= Enclosure((0.03,0.06))
oppenc_check(mcon, m1, 0.03, 0.06).output(
    "m1:mcon asymmetric enclosure",
    "Minimum enclosure of m1 around mcon: 0.03µm minimum, 0.06µm opposite"
)
# via.width == 0.15
width_check(via, 0.15).output(
    "via width", "via width: 0.15µm"
)
# via.space &gt;= 0.17
via.space(0.17).output(
    "via space", "via minimum space: 0.17µm"
)
# via.enclosed_by(m1) &gt;= Enclosure((0.055,0.085))
oppenc_check(via, m1, 0.055, 0.085).output(
    "m1:via asymmetric enclosure",
    "Minimum enclosure of m1 around via: 0.055µm minimum, 0.085µm opposite"
)
# via.enclosed_by(m2) &gt;= Enclosure((0.055,0.085))
oppenc_check(via, m2, 0.055, 0.085).output(
    "m2:via asymmetric enclosure",
    "Minimum enclosure of m2 around via: 0.055µm minimum, 0.085µm opposite"
)
# via2.width == 0.2
width_check(via2, 0.2).output(
    "via2 width", "via2 width: 0.2µm"
)
# via2.space &gt;= 0.2
via2.space(0.2).output(
    "via2 space", "via2 minimum space: 0.2µm"
)
# via2.enclosed_by(m2) &gt;= Enclosure((0.04,0.085))
oppenc_check(via2, m2, 0.04, 0.085).output(
    "m2:via2 asymmetric enclosure",
    "Minimum enclosure of m2 around via2: 0.04µm minimum, 0.085µm opposite"
)
# via2.enclosed_by(m3) &gt;= Enclosure(0.065)
m3.enclosing(via2, 0.065).output(
    "m3:via2 enclosure",
    "Minimum enclosure of m3 around via2: 0.065µm"
)
# via3.width == 0.2
width_check(via3, 0.2).output(
    "via3 width", "via3 width: 0.2µm"
)
# via3.space &gt;= 0.2
via3.space(0.2).output(
    "via3 space", "via3 minimum space: 0.2µm"
)
# via3.enclosed_by(m3) &gt;= Enclosure((0.06,0.09))
oppenc_check(via3, m3, 0.06, 0.09).output(
    "m3:via3 asymmetric enclosure",
    "Minimum enclosure of m3 around via3: 0.06µm minimum, 0.09µm opposite"
)
# via3.enclosed_by(m4) &gt;= Enclosure(0.065)
m4.enclosing(via3, 0.065).output(
    "m4:via3 enclosure",
    "Minimum enclosure of m4 around via3: 0.065µm"
)
# via4.width == 0.8
width_check(via4, 0.8).output(
    "via4 width", "via4 width: 0.8µm"
)
# via4.space &gt;= 0.8
via4.space(0.8).output(
    "via4 space", "via4 minimum space: 0.8µm"
)
# via4.enclosed_by(m4) &gt;= Enclosure(0.19)
m4.enclosing(via4, 0.19).output(
    "m4:via4 enclosure",
    "Minimum enclosure of m4 around via4: 0.19µm"
)
# via4.enclosed_by(m5) &gt;= Enclosure(0.31)
m5.enclosing(via4, 0.31).output(
    "m5:via4 enclosure",
    "Minimum enclosure of m5 around via4: 0.31µm"
)
# hvtp.width &gt;= 0.38
hvtp.width(0.38).output(
    "hvtp width", "hvtp minimum width: 0.38µm"
)
# hvtp.space &gt;= 0.38
hvtp.space(0.38).output(
    "hvtp space", "hvtp minimum space: 0.38µm"
)
# hvtp.area &gt;= 0.265
hvtp.with_area(nil, 0.265).output(
    "hvtp area", "hvtp minimum area: 0.265µm"
)
# lvtn.width &gt;= 0.38
lvtn.width(0.38).output(
    "lvtn width", "lvtn minimum width: 0.38µm"
)
# lvtn.space &gt;= 0.38
lvtn.space(0.38).output(
    "lvtn space", "lvtn minimum space: 0.38µm"
)
# lvtn.area &gt;= 0.265
lvtn.with_area(nil, 0.265).output(
    "lvtn area", "lvtn minimum area: 0.265µm"
)
# intersect(edge(difftap),edge(gate:hvmosgate)).length &gt;= 0.5
(difftap.edges&amp;gate__hvmosgate.edges).with_length(nil, 0.5).output(
    "(difftap.edges&amp;gate__hvmosgate.edges) length",
    "Minimum length of (difftap.edges&amp;gate__hvmosgate.edges): 0.5µm"
)
# intersect(edge(poly__conn),edge(gate:hvmosgate)).length &gt;= 0.42
(poly__conn.edges&amp;gate__hvmosgate.edges).with_length(nil, 0.42).output(
    "(poly__conn.edges&amp;gate__hvmosgate.edges) length",
    "Minimum length of (poly__conn.edges&amp;gate__hvmosgate.edges): 0.42µm"
)
# difftap.extend_over(gate:hvmosgate) &gt;= 0.25
extend_check(gate__hvmosgate, difftap, 0.25).output(
    "difftap:gate__hvmosgate extension",
    "Minimum extension of difftap of gate__hvmosgate: 0.25µm"
)
# poly__conn.extend_over(gate:hvmosgate) &gt;= 0.13
extend_check(gate__hvmosgate, poly__conn, 0.13).output(
    "poly__conn:gate__hvmosgate extension",
    "Minimum extension of poly__conn of gate__hvmosgate: 0.13µm"
)
# space(gate:hvmosgate,licon) &gt;= 0.055
gate__hvmosgate.separation(licon, 0.055, square).output(
    "gate__hvmosgate:licon spacing",
    "Minimum spacing between gate__hvmosgate and licon: 0.055µm"
)
# intersect(edge(poly__conn),edge(gate:mosgate)).length &gt;= 0.42
(poly__conn.edges&amp;gate__mosgate.edges).with_length(nil, 0.42).output(
    "(poly__conn.edges&amp;gate__mosgate.edges) length",
    "Minimum length of (poly__conn.edges&amp;gate__mosgate.edges): 0.42µm"
)
# difftap.extend_over(gate:mosgate) &gt;= 0.25
extend_check(gate__mosgate, difftap, 0.25).output(
    "difftap:gate__mosgate extension",
    "Minimum extension of difftap of gate__mosgate: 0.25µm"
)
# poly__conn.extend_over(gate:mosgate) &gt;= 0.13
extend_check(gate__mosgate, poly__conn, 0.13).output(
    "poly__conn:gate__mosgate extension",
    "Minimum extension of poly__conn of gate__mosgate: 0.13µm"
)
# space(gate:mosgate,licon) &gt;= 0.055
gate__mosgate.separation(licon, 0.055, square).output(
    "gate__mosgate:licon spacing",
    "Minimum spacing between gate__mosgate and licon: 0.055µm"
)
# gate:mosfet:nfet_01v8.enclosed_by(nsdm) &gt;= Enclosure(0.07)
nsdm.enclosing(gate__mosfet__nfet_01v8, 0.07).output(
    "nsdm:gate__mosfet__nfet_01v8 enclosure",
    "Minimum enclosure of nsdm around gate__mosfet__nfet_01v8: 0.07µm"
)
# gate:mosfet:nfet_01v8_lvt.enclosed_by(nsdm) &gt;= Enclosure(0.07)
nsdm.enclosing(gate__mosfet__nfet_01v8_lvt, 0.07).output(
    "nsdm:gate__mosfet__nfet_01v8_lvt enclosure",
    "Minimum enclosure of nsdm around gate__mosfet__nfet_01v8_lvt: 0.07µm"
)
# gate:mosfet:nfet_01v8_lvt.enclosed_by(lvtn) &gt;= Enclosure(0.07)
lvtn.enclosing(gate__mosfet__nfet_01v8_lvt, 0.07).output(
    "lvtn:gate__mosfet__nfet_01v8_lvt enclosure",
    "Minimum enclosure of lvtn around gate__mosfet__nfet_01v8_lvt: 0.07µm"
)
# gate:mosfet:nfet_g5v0d10v5.enclosed_by(nsdm) &gt;= Enclosure(0.07)
nsdm.enclosing(gate__mosfet__nfet_g5v0d10v5, 0.07).output(
    "nsdm:gate__mosfet__nfet_g5v0d10v5 enclosure",
    "Minimum enclosure of nsdm around gate__mosfet__nfet_g5v0d10v5: 0.07µm"
)
# gate:mosfet:pfet_01v8.enclosed_by(psdm) &gt;= Enclosure(0.07)
psdm.enclosing(gate__mosfet__pfet_01v8, 0.07).output(
    "psdm:gate__mosfet__pfet_01v8 enclosure",
    "Minimum enclosure of psdm around gate__mosfet__pfet_01v8: 0.07µm"
)
# gate:mosfet:pfet_01v8_hvt.enclosed_by(psdm) &gt;= Enclosure(0.07)
psdm.enclosing(gate__mosfet__pfet_01v8_hvt, 0.07).output(
    "psdm:gate__mosfet__pfet_01v8_hvt enclosure",
    "Minimum enclosure of psdm around gate__mosfet__pfet_01v8_hvt: 0.07µm"
)
# gate:mosfet:pfet_01v8_hvt.enclosed_by(hvtp) &gt;= Enclosure(0.07)
hvtp.enclosing(gate__mosfet__pfet_01v8_hvt, 0.07).output(
    "hvtp:gate__mosfet__pfet_01v8_hvt enclosure",
    "Minimum enclosure of hvtp around gate__mosfet__pfet_01v8_hvt: 0.07µm"
)
# gate:mosfet:pfet_01v8_lvt.enclosed_by(psdm) &gt;= Enclosure(0.07)
psdm.enclosing(gate__mosfet__pfet_01v8_lvt, 0.07).output(
    "psdm:gate__mosfet__pfet_01v8_lvt enclosure",
    "Minimum enclosure of psdm around gate__mosfet__pfet_01v8_lvt: 0.07µm"
)
# gate:mosfet:pfet_01v8_lvt.enclosed_by(lvtn) &gt;= Enclosure(0.07)
lvtn.enclosing(gate__mosfet__pfet_01v8_lvt, 0.07).output(
    "lvtn:gate__mosfet__pfet_01v8_lvt enclosure",
    "Minimum enclosure of lvtn around gate__mosfet__pfet_01v8_lvt: 0.07µm"
)
# gate:mosfet:pfet_g5v0d10v5.enclosed_by(psdm) &gt;= Enclosure(0.07)
psdm.enclosing(gate__mosfet__pfet_g5v0d10v5, 0.07).output(
    "psdm:gate__mosfet__pfet_g5v0d10v5 enclosure",
    "Minimum enclosure of psdm around gate__mosfet__pfet_g5v0d10v5: 0.07µm"
)
# pad.width &gt;= 40.0
pad.width(40.0).output(
    "pad width", "pad minimum width: 40.0µm"
)
# pad.space &gt;= 1.27
pad.space(1.27).output(
    "pad space", "pad minimum space: 1.27µm"
)
# pad.enclosed_by(m5) &gt;= Enclosure(1.0)
m5.enclosing(pad, 1.0).output(
    "m5:pad enclosure",
    "Minimum enclosure of m5 around pad: 1.0µm"
)
# resistor:active_res.width &gt;= 0.33
resistor__active_res.width(0.33).output(
    "resistor__active_res width", "resistor__active_res minimum width: 0.33µm"
)
# difftap.remove(diffres).width &gt;= 0.005
(difftap-diffres).width(0.005).output(
    "(difftap-diffres) width", "(difftap-diffres) minimum width: 0.005µm"
)
# resistor:poly_res.width &gt;= 0.33
resistor__poly_res.width(0.33).output(
    "resistor__poly_res width", "resistor__poly_res minimum width: 0.33µm"
)
# poly.remove(polyres).width &gt;= 0.005
(poly-polyres).width(0.005).output(
    "(poly-polyres) width", "(poly-polyres) minimum width: 0.005µm"
)
# difftap.enclosed_by(areaid_diode) &gt;= Enclosure(0.005)
areaid_diode.enclosing(difftap, 0.005).output(
    "areaid_diode:difftap enclosure",
    "Minimum enclosure of areaid_diode around difftap: 0.005µm"
)
# difftap.enclosed_by(areaid_diode) &gt;= Enclosure(0.005)
areaid_diode.enclosing(difftap, 0.005).output(
    "areaid_diode:difftap enclosure",
    "Minimum enclosure of areaid_diode around difftap: 0.005µm"
)
# space(difftap,poly) &gt;= 0.075
difftap.separation(poly, 0.075, square).output(
    "difftap:poly spacing",
    "Minimum spacing between difftap and poly: 0.075µm"
)
# space(licon,difftap) &gt;= 0.235
licon.separation(difftap, 0.235, square).output(
    "licon:difftap spacing",
    "Minimum spacing between licon and difftap: 0.235µm"
)
# join(intersect(difftap,hvi)).space &gt;= 0.3
((difftap&amp;hvi)).space(0.3).output(
    "((difftap&amp;hvi)) space", "((difftap&amp;hvi)) minimum space: 0.3µm"
)
# space(difftap,hvi) &gt;= 0.18
difftap.separation(hvi, 0.18, square).output(
    "difftap:hvi spacing",
    "Minimum spacing between difftap and hvi: 0.18µm"
)
# space(difftap,nwm) &gt;= 0.34
difftap.separation(nwm, 0.34, square).output(
    "difftap:nwm spacing",
    "Minimum spacing between difftap and nwm: 0.34µm"
)
</text></klayout-macro>